{"version":3,"sources":["components/Timeout.js","audios/toasty.mp3","audios/gunzerker_rocknroll.mp3","audios/game_over.mp3","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timeout","className","React","Component","Timer","props","state","horas","minutos","segundos","start","timeout","disabled","audio","displayButtonStart","setRef","bind","handleClickStart","handleChange","handleClickStop","handleKeyPress","handleStatus","playAudio","countdown","this","countdownApi","getApi","isCompleted","setState","gameover","event","isNaN","key","preventDefault","document","getElementsByClassName","play","target","name","value","some","parseInt","rocknroll","toasty","tempo","date","Date","now","ref","autoStart","daysInHours","onComplete","renderer","title","width","height","src","frameBorder","allowFullScreen","allow","autostart","formatted","days","hours","minutes","seconds","setTimeout","action","onSubmit","type","inputMode","maxLength","placeholder","onChange","onKeyPress","style","display","onClick","autoPlay","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.39a3d20a.chunk.js","sourcesContent":["import React from 'react';\n\nclass Timeout extends React.Component {\n  render() {\n    return(\n      <div className=\"time-out\">\n        <p>Time is over</p>\n      </div>\n    )\n  }\n}\n\nexport default Timeout;","export default __webpack_public_path__ + \"static/media/toasty.561ec763.mp3\";","export default __webpack_public_path__ + \"static/media/gunzerker_rocknroll.4b5b0116.mp3\";","export default __webpack_public_path__ + \"static/media/game_over.1536b513.mp3\";","import React from 'react';\nimport Countdown from 'react-countdown';\nimport Timeout from './Timeout';\nimport toasty from '../audios/toasty.mp3';\nimport rocknroll from '../audios/gunzerker_rocknroll.mp3';\nimport gameover from '../audios/game_over.mp3';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      horas: 0,\n      minutos: 0,\n      segundos: 0,\n      start: false,\n      timeout: false,\n      disabled: false,\n      audio: '',\n      displayButtonStart: 'initial',\n    };\n\n    this.setRef = this.setRef.bind(this);\n    this.handleClickStart = this.handleClickStart.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClickStop = this.handleClickStop.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.handleStatus = this.handleStatus.bind(this);\n    this.playAudio = this.playAudio.bind(this);\n  }\n\n  setRef(countdown){ // função necessária para que funcione o pause, start, stop. ela habilita o acesso a api e através da api temos como acessar o pause, start etc. vide documentação\n    if (countdown) {\n      this.countdownApi = countdown.getApi();\n    }\n  };\n\n  handleStatus() {\n    if(this.countdownApi.isCompleted()) {\n      this.setState({\n        start: false,\n        timeout:true,\n        disabled: false,\n        audio: gameover,\n      })\n    }\n  }\n\n  handleKeyPress(event) {\n    if(isNaN(event.key)) {\n      event.preventDefault();\n    }\n  }\n\n  playAudio() {\n    const audioEl = document.getElementsByClassName(\"audio-element\")[0]\n    audioEl.play()\n  }\n\n  handleChange({ target }) {\n    const name = target.name;\n    const value = target.value;\n\n    this.setState({\n      [name]: value,\n    })\n  }\n\n  handleClickStart() {\n    const { horas, minutos, segundos } = this.state;\n    const myStates = [horas, minutos, segundos];\n\n    const isValidInputValue = myStates.some((state) => parseInt(state) !== 0 && state !== '') // verifica se cada estado tem o valor diferente de zero e se não está vazio.\n\n    // const condition = (parseInt(horas) !== 0 || parseInt(minutos) !== 0 || parseInt(segundos) !== 0) // implementação anterior a de cima;\n    \n    if (isValidInputValue) { // se o valor que o usuario digitar for somente 0 não inicia o cronometro, e vazio também não.\n      this.setState({\n        start: true,\n        disabled: true,\n        audio: rocknroll,\n        displayButtonStart: 'none',\n      }, () => {\n        this.countdownApi.start();\n        this.playAudio();\n      })\n    } else {\n      this.setState({\n        audio: toasty,\n      }, () => this.playAudio())\n    }\n  }\n\n  handleClickStop() {\n    this.setState({\n      horas: 0,\n      minutos: 0,\n      segundos: 0,\n      start: false,\n      timeout: false,\n      disabled: false,\n      audio: toasty,\n      displayButtonStart: 'initial',\n    }, () => this.playAudio())\n  }\n\n  render() {\n    const horas = this.state.horas * 3600000;\n    const minutos = this.state.minutos * 60000;\n    const segundos = this.state.segundos * 1000;\n    const tempo = minutos + segundos + horas;\n\n    return (\n      <div className=\"render\">\n        <Countdown className=\"countdown\"\n          key={ Date.now() + tempo }\n          date={ Date.now() + tempo }\n          ref={this.setRef} // Necessário para ativar a api que pode pausar, startar, etc.\n          autoStart={false}\n          daysInHours={false}\n          onComplete={ this.handleStatus }\n          renderer={ (props) => {\n              if (this.state.start) {\n                return (\n                  <div className=\"video\">\n                    <iframe title=\"youtube-video\" className=\"timing\" width=\"420\" height=\"345\" src=\"https://www.youtube.com/embed/FhBnW7bZHEE?autoplay=1\" frameBorder=\"0\" allowFullScreen allow=\"autoplay\" autostart=\"true\"></iframe>\n                    <div className='timer'>{`${props.formatted.days}:${props.formatted.hours}:${props.formatted.minutes}:${props.formatted.seconds}`}</div>\n                  </div>\n                )\n              }\n\n              if (this.state.timeout) {\n                this.playAudio();\n\n                setTimeout(() => {\n                  this.setState({\n                    timeout: false,\n                    displayButtonStart: 'initial',\n                  })\n                }, 3040)\n                return <Timeout />;\n              }\n\n              return <span className='timer'>{`${props.formatted.days}:${props.formatted.hours}:${props.formatted.minutes}:${props.formatted.seconds}`}</span>;\n          } }\n        />\n        <form className=\"form\" action=\"\" onSubmit={(event) => event.preventDefault()}>\n        <div className=\"inputs-text\">\n          <input type=\"text\" inputMode=\"numeric\" name=\"horas\" maxLength=\"2\" placeholder=\"Hr.\" onChange={ this.handleChange } onKeyPress={this.handleKeyPress} disabled={this.state.disabled} />:\n          <input type=\"text\" inputMode=\"numeric\" name=\"minutos\" maxLength=\"2\" placeholder=\"Min.\" onChange={ this.handleChange } onKeyPress={this.handleKeyPress} disabled={this.state.disabled} />:\n          <input type=\"text\" inputMode=\"numeric\" name=\"segundos\" maxLength=\"2\" placeholder=\"Sec.\" onChange={ this.handleChange } onKeyPress={this.handleKeyPress} disabled={this.state.disabled} />\n        </div>\n        <div className=\"buttons\">\n          <button style={{display: this.state.displayButtonStart }} onClick={ this.handleClickStart } disabled={this.state.disabled}>Start</button>\n          <input type=\"reset\" onClick={ this.handleClickStop } value=\"Clear\" />\n        </div>\n        <audio className=\"audio-element\" autoPlay src={this.state.audio}></audio>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Timer;","import React from 'react';\nimport Timer from './components/Timer';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return(\n      <section className=\"app\">\n        <Timer />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}